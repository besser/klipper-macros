[gcode_macro _km_probe]
description: Config vars for FLSun probe deploy/out
variable_probe_state: 'none'
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro _km_probe'] }"


[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "out" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=_km_probe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}


[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed


[gcode_macro ASSERT_PROBE_OUT]
description: error if probe not out
gcode:
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=out


[gcode_macro bed_mesh_calibrate]
rename_existing: _KM_BED_MESH_CALIBRATE_BASE
description: Wraps BED_MESH_CALIBRATE, scaling probe count to specified area and adding probe check.
  Usage: See Klipper documentation.
gcode:
  {% set calibrate_cmd = (printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|default(["bed_mesh_calibrate"],True))[-1] %}

  ASSERT_PROBE_DEPLOYED
  {calibrate_cmd}{% for k in params %}{ ' '~k~'="'~params[k]~'"' }{% endfor %}


[gcode_macro UNLOAD_FILAMENT]
description: UNLOAD filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    RESPOND TYPE=error MSG="Unable to UNLOAD filament while printing!"
  {% else %}
    ASSERT_PROBE_OUT
    SAVE_GCODE_STATE NAME=unload_state
    {% if printer.extruder.temperature < 200 %}
      RESPOND MSG="HEATING..."
      M109 S235
    {% endif %}
    RESPOND MSG="Retract filament..."
    G91
    G0 E2 F400
    G0 E-5 F800
    G0 E-80 F800
    RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    RESPOND TYPE=error MSG="Unable to LOAD filament while printing!"
  {% else %}
    ASSERT_PROBE_OUT
    SAVE_GCODE_STATE NAME=load_state
    {% if printer.extruder.temperature < 235 %}
      RESPOND MSG="Heating..."
      M109 S235
    {% endif %}
    RESPOND MSG="Load filament..."
    G91
    G0 E50 F300
    G0 E20 F200
    M400
    RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


[gcode_macro ENDSTOPS_Z_CALIBRATION]
description: Endstops Phase Calibration
  Usage: ENDSTOPS_Z_CALIBRATION [SAMPLES=<number of samples, default: 5>]
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to calibrate while printing!"
  {% elif printer.endstop_phase is not defined %}
    RESPOND TYPE=error MSG="The `endstop_phase` config section isn't defined in the configuration file!"
  {% else %}
    G28 FORCE_MAX_Z=0

    {% set kinematics = printer.configfile.settings.printer.kinematics %}
    {% set zmax = printer.toolhead.axis_maximum.z|round(0)|int %}    

    {% for i in range(1, params.SAMPLES|default(5)|int) %}
      G1 Z{(range(100, zmax-20)|random)} F{([1500, 2000, 2500, 3000, 3500, 4000]|random)}
      G28 Z FORCE_MAX_Z=0
    {% endfor %}

    {% if kinematics == "delta" %}
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
    {% else %}
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_z
    {% endif %}

    SAVE_CONFIG
  {% endif %}


##[gcode_macro DELTA_CALIBRATE]
##rename_existing: _KM_DELTA_CALIBRATE
[gcode_macro DELTA_CALIBRATION]
description: Wraps DELTA_CALIBRATE, checking if probe is attached, do lazy home and at the end save configs.
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to execute `DELTA_CALIBRATION` while printing!"
  {% else %}
    {% set calibrate_cmd = (printer["gcode_macro list_macros"].macros.delta_calibrate|default(["delta_calibrate"],True))[-1] %}

    ASSERT_PROBE_DEPLOYED
    SET_GCODE_OFFSET Z=0
    G28 FORCE_MAX_Z=0

    ## {calibrate_cmd}{% for k in params %}{ ' '~k~'="'~params[k]~'"' }{% endfor %}
    DELTA_CALIBRATE

    G1 X0 Y0 Z50 F2500
    G28 FORCE_MAX_Z=0
    SAVE_CONFIG
  {% endif %}


[gcode_macro BED_LEVELING]
description: Nivellement du plateau
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to leveling bed while printing!"
  {% else %}
    ASSERT_PROBE_DEPLOYED
    G28
    G1 X0 Y0 Z50 F2500
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z50 F2500
    G28
  {% endif %}


[gcode_macro PID_BED_65]
description: PID BED
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to calibrate bed PID while printing!"
  {% else %}
    G28
    M106 S0
    G1 Z50 F1500
    PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(65)}
    G28
    SAVE_CONFIG
  {% endif %}


[gcode_macro PID_HOTEND_220]
description: PID Hotend
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to calibrate hotend PID while printing!"
  {% else %}
    ASSERT_PROBE_OUT
    G28
    M106 S0
    G1 Z5 F1500
    PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
    G28
    SAVE_CONFIG
  {% endif %}


[gcode_macro MOVE_TO_Z8]
description: MOVE Z=8
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to do this action while printing!"
  {% else %}
    G28
    G1 Z8.3 F2500
  {% endif %}


[gcode_macro Z_OFFSET_CALIBRATION]
description: Mesuser le Z-Offset
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Unable to do this action while printing!"
  {% else %}
    ASSERT_PROBE_DEPLOYED
    SET_GCODE_OFFSET Z=0
    G28
    G1 X0 Y0 Z50 F2500
    M400
    PROBE_CALIBRATE
  {% endif %}


[gcode_macro PRESSURE_ADVANCE]
description: Pressure Advance
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="Impossible PA MACRO"
  {% else %}
    SET_PRESSURE_ADVANCE ADVANCE=0   
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005
  {% endif %}


[gcode_macro M204]
description: Accelerations
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}


[gcode_macro SQUARE_CORNER_SPEED]
description: Alternative au Jerk
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X|int}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y|int}
  {% endif %}


# [gcode_macro CHAMBER_TEMP]
# gcode:
#     {% set s = params.S|default(0)|float %}
#     SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}			


[gcode_macro SET_GCODE_OFFSET]
description: SAVE Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% else %}
    {% set offsets = {'x': None,'y': None,'z': None} %}
  {% endif %}
  {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
  {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
  {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
    {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
    {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
    _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
  {% endif %}


[gcode_macro _TMC]
gcode:
  DUMP_TMC STEPPER=stepper_a
  DUMP_TMC STEPPER=stepper_b
  DUMP_TMC STEPPER=stepper_c
  DUMP_TMC STEPPER=extruder
